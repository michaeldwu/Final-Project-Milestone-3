subtitle = "As of March 20th, 2020",
x = "Case Count",
y = "Date") +
theme_classic()
iran_covidata <- covidata %>%
filter(country_region == "Iran")
iran_plot <- ggplot(iran_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases)) +
geom_line() +
labs(title = "Iran Covid-19 Cases",
subtitle = "As of March 20th, 2020",
x = "Case Count",
y = "Date") +
theme_classic()
italy_covidata <- covidata %>%
filter(country_region == "Italy")
italy_plot <- ggplot(italy_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases)) +
geom_line() +
labs(title = "Italy Covid-19 Cases",
subtitle = "As of March 20th, 2020",
x = "Case Count",
y = "Date") +
theme_classic()
filtered_covidata <- covidata %>%
filter(country_region %in% c("Italy", "Korea, South", "US", "Spain", "France", "China", "Germany", "Iran")) %>%
filter(is.na(province_state) | province_state == "France" | province_state == "China" | province_state == "US")
ggplot(filtered_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = country_region)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Case Count",
y = "Date") +
theme_classic()
covidata %>%
filter(country_region == "US") %>%
group_by(province_state) %>%
count(cases)
covidata %>%
filter(country_region == "US") %>%
group_by(province_state, date) %>%
count(cases)
US_covidata <- covidata %>%
filter(country_region == "US")
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Case Count",
y = "Date") +
theme_classic()
covidata %>%
filter(country_region == "US") %>%
group_by(province_state, date)
covidata %>%
filter(country_region == "US") %>%
group_by(province_state, date) %>%
arrange(desc(cases))
covidata %>%
filter(country_region == "US") %>%
group_by(province_state, date) %>%
arrange(desc(cases)) %>%
count(province_state)
covidata %>%
filter(country_region == "US") %>%
group_by(province_state, date) %>%
arrange(desc(cases)) %>%
select(province_state, cases)
covidata %>%
filter(country_region == "US") %>%
arrange(desc(cases)) %>%
select(province_state, cases)
covidata %>%
filter(country_region == "US") %>%
arrange(desc(cases)) %>%
select(province_state, cases) %>%
count(province_state)
covidata %>%
filter(country_region == "US") %>%
arrange(desc(cases)) %>%
select(province_state, cases)
# Find the most affected states
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %>% c("New York", "Washington", "California", "New Jersey"))
# Find the most affected states
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Case Count",
y = "Date") +
theme_classic()
# Find the most affected states
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic()
covidata %>%
filter(country_region == "China") %>%
arrange(desc(cases))
# Find the most affected states
China_covidata <- covidata %>%
filter(country_region == "China") %>%
filter(province_state %in% c("Hubei", "Guangdong", "Henan", "Zhejiang"))
ggplot(China_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic()
# Find the most affected states
China_covidata <- covidata %>%
filter(country_region == "China") %>%
filter(province_state %in% c("Hubei", "Guangdong", "Henan", "Zhejiang"))
ggplot(China_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic() +
scale_y_continuous(trans='log10')
# Find the most affected states
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases in China's 4 Most Affected Provinces",
subtitle = "As of March 20th, In Log Scale",
x = "Date",
y = "Case Count") +
theme_classic() +
scale_y_continuous(trans='log10')
# Find the most affected states
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases in China's 4 Most Affected Provinces",
subtitle = "As of March 20th, In Log Scale",
x = "Date",
y = "Case Count") +
theme_classic()
# Find the most affected states
China_covidata <- covidata %>%
filter(country_region == "China") %>%
filter(province_state %in% c("Hubei", "Guangdong", "Henan", "Zhejiang"))
ggplot(China_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases in China's 4 Most Affected Provinces",
subtitle = "In Log Scale",
x = "Date",
y = "Case Count") +
theme_classic() +
scale_y_continuous(trans='log10')
# Find the most affected states in the United States
US_covidata <- covidata %>%
filter(country_region == "US") %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases in China's 4 Most Affected Provinces",
subtitle = "As of March 20th, In Log Scale",
x = "Date",
y = "Case Count") +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reprex)
library(janitor)
library(gt)
library(readr)
library(readxl)
library(rvest)
library(ggthemes)
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_19-covid_onfirmed_US.csv'
) %>%
clean_names()
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_19_covid_onfirmed_US.csv'
) %>%
clean_names()
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_19_covid_confirmed_US.csv'
) %>%
clean_names()
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_covid19_confirmed_US.csv'
) %>%
clean_names()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reprex)
library(janitor)
library(gt)
library(readr)
library(readxl)
library(rvest)
library(ggthemes)
# Loading the untidy version of the coronavirus data forked from the Johns Hopkins' GitHub repo
# Specifying column types to avoid any forms of errors
untidy_covidata_global <- read_csv('JH-covid19-rawdata/time_series_covid19_confirmed_global.csv', col_types = cols(
.default = col_double(),
`Province/State` = col_character(),
`Country/Region` = col_character()
)
) %>%
clean_names()
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_covid19_confirmed_US.csv', col_types = cols(
.default = col_double(),
iso2 = col_character(),
iso3 = col_character(),
Admin2 = col_character(),
Province_State = col_character(),
Country_Region = col_character(),
Combined_Key = col_character()
)
) %>%
clean_names()
view(untidy_covidata_global)
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_global
view(covidata_global)
view(untidy_covidata_us)
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us
view(covidata_us)
x
dafs
exit
stop
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reprex)
library(janitor)
library(gt)
library(readr)
library(readxl)
library(rvest)
library(ggthemes)
# Loading the untidy version of the coronavirus data forked from the Johns Hopkins' GitHub repo
# Specifying column types to avoid any forms of errors
untidy_covidata_global <- read_csv('JH-covid19-rawdata/time_series_covid19_confirmed_global.csv', col_types = cols(
.default = col_double(),
`Province/State` = col_character(),
`Country/Region` = col_character()
)
) %>%
clean_names()
untidy_covidata_us <- read_csv('JH-covid19-rawdata/time_series_covid19_confirmed_US.csv', col_types = cols(
.default = col_double(),
iso2 = col_character(),
iso3 = col_character(),
Admin2 = col_character(),
Province_State = col_character(),
Country_Region = col_character(),
Combined_Key = col_character()
)
) %>%
clean_names()
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
view(covidata_us)
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -ios2, -iso3, -code3, -fips, -admin2, -lat, -long)
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -iso2, -iso3, -code3, -fips, -admin2, -lat, -long)
covidata_us
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -iso2, -iso3, -code3, -fips, -admin2, -lat, -long, -combined_key)
covidata_global
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
# Removing extraneous or unecessary columns so that the tibble will be smaller, these are huge data tables
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-lat, -long)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -iso2, -iso3, -code3, -fips, -admin2, -lat, -long, -combined_key)
covidata_us
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
# Removing extraneous or unecessary columns so that the tibble will be smaller, these are huge data tables
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-lat, -long)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -iso2, -iso3, -code3, -fips, -lat, -long, -combined_key) %>%
rename(county = admin2)
covidata_us
# Tidying the untidy_covidata tibble using pivot_longer
# Pivoting so that dates will now be row data entries instead of columns as they were originally
# Removing extraneous or unecessary columns so that the tibble will be smaller, these are huge data tables
covidata_global <- untidy_covidata_global %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-lat, -long)
covidata_us <- untidy_covidata_us %>%
pivot_longer(
cols = starts_with("x"),
names_to = "date",
names_prefix = "x",
values_to = "cases",
values_drop_na = TRUE
) %>%
select(-uid, -iso2, -iso3, -code3, -fips, -lat, -long, -combined_key) %>%
rename(county = admin2, country = country_region)
covidata_us
italy_covidata <- covidata_global %>%
filter(country_region == "Italy")
ggplot(italy_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases)) +
geom_line() +
labs(title = "Italy Covid-19 Cases",
subtitle = "As of March 20th, 2020",
x = "Case Count",
y = "Date") +
theme_classic()
italy_covidata <- covidata_global %>%
filter(country_region == "Italy")
italy_plot <- ggplot(italy_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases)) +
geom_line() +
labs(title = "Italy Covid-19 Cases",
subtitle = "As of March 20th, 2020",
x = "Case Count",
y = "Date") +
theme_classic()
filtered_covidata <- covidata_global %>%
filter(country_region %in% c("Italy", "Korea, South", "Spain", "France", "Germany", "Iran")) %>%
filter(is.na(province_state) | province_state == "France")
ggplot(filtered_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = country_region)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic()
# Find the most affected states in the United States
# Would use log scales like in China's case below, but the case reporting is so erratic
# that the graphs for log scales on the y-axis looks so poor.
US_covidata <- covidata_us %>%
filter(province_state %in% c("New York", "Washington", "California", "New Jersey"))
ggplot(US_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = province_state)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases in China's 4 Most Affected Provinces",
subtitle = "As of March 20th, In Log Scale",
x = "Date",
y = "Case Count") +
theme_classic()
filtered_covidata <- covidata_global %>%
filter(country_region %in% c("Italy", "Korea, South", "Spain", "France", "Germany", "Iran")) %>%
filter(is.na(province_state) | province_state == "France")
ggplot(filtered_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = country_region)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic()
ggsave(file = "finalproject_shiny/covid_cases_by_country.png", scale = .4)
shiny::runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
runApp('finalproject_shiny')
filtered_covidata <- covidata_global %>%
filter(country_region %in% c("Italy", "Korea, South", "Spain", "France", "Germany", "Iran")) %>%
filter(is.na(province_state) | province_state == "France")
ggplot(filtered_covidata, aes(x = as.Date(date,"%m_%d_%y"), y = cases, color = country_region)) +
geom_line() +
labs(title = "Confirmed Covid-19 Cases of the Most Affected Countries",
subtitle = "As of March 20th, Excluding China and the United States",
x = "Date",
y = "Case Count") +
theme_classic()
ggsave(file = "finalproject_shiny/images/covid_cases_by_country.png", scale = 0.9)
runApp('finalproject_shiny')
runApp('finalproject_shiny')
